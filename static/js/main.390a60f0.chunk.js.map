{"version":3,"sources":["components/MemoryCard/MemoryCard.js","components/MainGameContainer/MainGameContainer.js","components/Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["MemoryCard","props","className","key","id","onClick","handleClick","clicked","name","src","image","alt","MainGameContainer","state","images","message","score","topScore","imageOrder","forEach","index","setState","sort","Math","random","newScore","newTopScore","this","map","Component","Header","class","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"swCAaeA,G,MAVI,SAAAC,GAAK,OACtB,yBACEC,UAAU,wDACVC,IAAKF,EAAMG,GACXC,QAAS,kBAAMJ,EAAMK,YAAYL,EAAMG,GAAIH,EAAMM,WAEjD,yBAAKH,GAAIH,EAAMO,KAAMC,IAAKR,EAAMS,MAAOC,IAAKV,EAAMO,U,OCkEvCI,G,iNArEbC,MAAQ,CACNC,SACAC,QAAS,wBACTC,MAAO,EACPC,SAAU,G,EAGZX,YAAc,SAACF,EAAIG,GACjB,IAAMW,EAAa,EAAKL,MAAMC,OAE9B,GAAIP,EAIF,OAHAW,EAAWC,SAAQ,SAACT,EAAOU,GACzBF,EAAWE,GAAOb,SAAU,KAEvB,EAAKc,SAAS,CACnBX,MAAOQ,EAAWI,MAAK,kBAAMC,KAAKC,SAAW,MAC7CT,QAAS,qBACTC,MAAO,IAGTE,EAAWC,SAAQ,SAACT,EAAOU,GACrBhB,IAAOM,EAAMN,KACfc,EAAWE,GAAOb,SAAU,MAH3B,MAOuB,EAAKM,MAAzBI,EAPH,EAOGA,SACFQ,EARD,EAOaT,MACO,EACnBU,EAAcD,EAAWR,EAAWQ,EAAWR,EAErD,OAAO,EAAKI,SAAS,CACnBX,MAAOQ,EAAWI,MAAK,kBAAMC,KAAKC,SAAW,MAC7CT,QAAS,yBACTC,MAAOS,EACPR,SAAUS,K,wEAKN,IAAD,OACP,OACE,yBAAKxB,UAAU,qCACb,yBAAKA,UAAU,2BACb,2BAAIyB,KAAKd,MAAME,UAEjB,yBAAKb,UAAU,0BACb,qCACUyB,KAAKd,MAAMG,MADrB,iBAC0CW,KAAKd,MAAMI,WAGvD,yBAAKf,UAAU,aACb,yBAAKA,UAAU,OACZyB,KAAKd,MAAMC,OAAOc,KAAI,SAAAlB,GAAK,OAC1B,kBAAC,EAAD,CACEP,IAAKO,EAAMN,GACXA,GAAIM,EAAMN,GACVI,KAAME,EAAMF,KACZD,QAASG,EAAMH,QACfG,MAAOA,EAAMA,MACbJ,YAAa,EAAKA,wB,GA5DFuB,c,YCQjBC,MAVf,WACE,OACE,4BAAQC,MAAM,UACZ,+CACA,+CACA,6ECISC,EAPH,kBACV,yBAAK9B,UAAU,iCACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCIgB+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.390a60f0.chunk.js","sourcesContent":["import React from 'react';\nimport './MemoryCard.css';\n\nconst MemoryCard = props => (\n  <div\n    className='allCards col-xs-6 col-sm-6 col-md-4 col-lg-3 col-xl-3'\n    key={props.id}\n    onClick={() => props.handleClick(props.id, props.clicked)}\n  >\n    <img id={props.name} src={props.image} alt={props.name} />\n  </div>\n);\n\nexport default MemoryCard;\n","import React, { Component } from 'react';\nimport MemoryCard from '../MemoryCard';\nimport images from '../../actors.json';\nimport './MainGameContainer.css';\n\nclass MainGameContainer extends Component {\n  state = {\n    images,\n    message: 'Click a fitness star!',\n    score: 0,\n    topScore: 0\n  };\n\n  handleClick = (id, clicked) => {\n    const imageOrder = this.state.images;\n\n    if (clicked) {\n      imageOrder.forEach((image, index) => {\n        imageOrder[index].clicked = false;\n      });\n      return this.setState({\n        image: imageOrder.sort(() => Math.random() - 0.5),\n        message: 'You Guessed Wrong!',\n        score: 0\n      });\n    } else {\n      imageOrder.forEach((image, index) => {\n        if (id === image.id) {\n          imageOrder[index].clicked = true;\n        }\n      });\n\n      const { topScore, score } = this.state;\n      const newScore = score + 1;\n      const newTopScore = newScore > topScore ? newScore : topScore;\n\n      return this.setState({\n        image: imageOrder.sort(() => Math.random() - 0.5),\n        message: 'You Guessed Correctly!',\n        score: newScore,\n        topScore: newTopScore\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className='container-fluid mainCardContainer'>\n        <div className='gameMessage text-center'>\n          <p>{this.state.message}</p>\n        </div>\n        <div className='gameScores text-center'>\n          <p>\n            Score: {this.state.score} | Top Score: {this.state.topScore}\n          </p>\n        </div>\n        <div className='container'>\n          <div className='row'>\n            {this.state.images.map(image => (\n              <MemoryCard\n                key={image.id}\n                id={image.id}\n                name={image.name}\n                clicked={image.clicked}\n                image={image.image}\n                handleClick={this.handleClick}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MainGameContainer;\n","import React from 'react';\nimport './Header.css';\n\nfunction Header() {\n  return (\n    <header class='header'>\n      <h1>Clicky Friends!</h1>\n      <h2>Fitness Edition</h2>\n      <p>Click all the friends no duplicates allowed!</p>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport MainGameContainer from './components/MainGameContainer';\nimport './App.css';\nimport Header from './components/Header';\n\nconst App = () => (\n  <div className='container-fluid mainContainer'>\n    <Header></Header>\n    <MainGameContainer />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}